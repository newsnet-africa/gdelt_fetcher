{"$message_type":"diagnostic","message":"unused import: `EXPORT_DATA_PATH`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":89,"byte_end":105,"line_start":4,"line_end":4,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"    use crate::{EXPORT_DATA_PATH, GKG_DATA_PATH};","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":89,"byte_end":107,"line_start":4,"line_end":4,"column_start":17,"column_end":35,"is_primary":true,"text":[{"text":"    use crate::{EXPORT_DATA_PATH, GKG_DATA_PATH};","highlight_start":17,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":88,"byte_end":89,"line_start":4,"line_end":4,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"    use crate::{EXPORT_DATA_PATH, GKG_DATA_PATH};","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":120,"byte_end":121,"line_start":4,"line_end":4,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"    use crate::{EXPORT_DATA_PATH, GKG_DATA_PATH};","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `EXPORT_DATA_PATH`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/gkg_tests.rs:4:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::{EXPORT_DATA_PATH, GKG_DATA_PATH};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `models::models::gdelt::gkg::GlobalKnowledgeGraph`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/mentions_tests.rs","byte_start":120,"byte_end":168,"line_start":5,"line_end":5,"column_start":9,"column_end":57,"is_primary":true,"text":[{"text":"    use models::models::gdelt::gkg::GlobalKnowledgeGraph;","highlight_start":9,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/mentions_tests.rs","byte_start":116,"byte_end":169,"line_start":5,"line_end":5,"column_start":5,"column_end":58,"is_primary":true,"text":[{"text":"    use models::models::gdelt::gkg::GlobalKnowledgeGraph;","highlight_start":5,"highlight_end":58}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `models::models::gdelt::gkg::GlobalKnowledgeGraph`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/mentions_tests.rs:5:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::gkg::GlobalKnowledgeGraph;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Ref`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":197,"byte_end":200,"line_start":5,"line_end":5,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"    use std::cell::{Ref, RefCell};","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":197,"byte_end":202,"line_start":5,"line_end":5,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"    use std::cell::{Ref, RefCell};","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":196,"byte_end":197,"line_start":5,"line_end":5,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    use std::cell::{Ref, RefCell};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":209,"byte_end":210,"line_start":5,"line_end":5,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"    use std::cell::{Ref, RefCell};","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Ref`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_category_list_tests.rs:5:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::cell::{Ref, RefCell};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":1089,"byte_end":1093,"line_start":21,"line_end":21,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None),                                    // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::zero_prefixed_literal)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":1089,"byte_end":1093,"line_start":21,"line_end":21,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None),                                    // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":"101","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":1089,"byte_end":1093,"line_start":21,"line_end":21,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None),                                    // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":"0o101","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:21:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (0101, None),                                    // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::zero_prefixed_literal)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (\u001b[0m\u001b[0m\u001b[38;5;10m101\u001b[0m\u001b[0m, None),                                    // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (\u001b[0m\u001b[0m\u001b[38;5;10m0o101\u001b[0m\u001b[0m, None),                                    // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"digits grouped inconsistently by underscores","code":{"code":"clippy::inconsistent_digit_grouping","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":1261,"byte_end":1280,"line_start":24,"line_end":24,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                2024_01_01_00_00_00,","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::inconsistent_digit_grouping)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":1261,"byte_end":1280,"line_start":24,"line_end":24,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                2024_01_01_00_00_00,","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":"20_240_101_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: digits grouped inconsistently by underscores\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:24:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                2024_01_01_00_00_00,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider: `20_240_101_000_000`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":2827,"byte_end":2831,"line_start":60,"line_end":60,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None), // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":2827,"byte_end":2831,"line_start":60,"line_end":60,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None), // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":"101","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":2827,"byte_end":2831,"line_start":60,"line_end":60,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"            (0101, None), // Invalid format","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":"0o101","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:60:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (0101, None), // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (\u001b[0m\u001b[0m\u001b[38;5;10m101\u001b[0m\u001b[0m, None), // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (\u001b[0m\u001b[0m\u001b[38;5;10m0o101\u001b[0m\u001b[0m, None), // Invalid format\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"digits grouped inconsistently by underscores","code":{"code":"clippy::inconsistent_digit_grouping","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":3082,"byte_end":3101,"line_start":68,"line_end":68,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                2024_01_01_00_00_00,","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":3082,"byte_end":3101,"line_start":68,"line_end":68,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                2024_01_01_00_00_00,","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":"20_240_101_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: digits grouped inconsistently by underscores\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:68:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                2024_01_01_00_00_00,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider: `20_240_101_000_000`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `models::models::gdelt::event::Event`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_location_tests.rs","byte_start":126,"byte_end":161,"line_start":5,"line_end":5,"column_start":9,"column_end":44,"is_primary":true,"text":[{"text":"    use models::models::gdelt::event::Event;","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_location_tests.rs","byte_start":122,"byte_end":162,"line_start":5,"line_end":5,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    use models::models::gdelt::event::Event;","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `models::models::gdelt::event::Event`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_location_tests.rs:5:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::event::Event;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `DatabaseTableEntry`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_location_tests.rs","byte_start":264,"byte_end":282,"line_start":7,"line_end":7,"column_start":33,"column_end":51,"is_primary":true,"text":[{"text":"    use models::models::gdelt::{DatabaseTableEntry, DatabaseTableEnum, GDELTObject};","highlight_start":33,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_location_tests.rs","byte_start":264,"byte_end":284,"line_start":7,"line_end":7,"column_start":33,"column_end":53,"is_primary":true,"text":[{"text":"    use models::models::gdelt::{DatabaseTableEntry, DatabaseTableEnum, GDELTObject};","highlight_start":33,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `DatabaseTableEntry`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_location_tests.rs:7:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::{DatabaseTableEntry, DatabaseTableEnum, GDELTObject};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `k`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":635,"byte_end":636,"line_start":18,"line_end":18,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            let k = record.clone().as_slice();","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/gkg_tests.rs","byte_start":635,"byte_end":636,"line_start":18,"line_end":18,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            let k = record.clone().as_slice();","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"_k","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `k`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/gkg_tests.rs:18:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let k = record.clone().as_slice();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_k`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_actor_tests.rs","byte_start":13,"byte_end":4033,"line_start":2,"line_end":86,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_actor_tests {","highlight_start":1,"highlight_end":28},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::EXPORT_DATA_PATH;","highlight_start":1,"highlight_end":33},{"text":"    use models::models::gdelt::utils::gdelt_actor::GDELTActor;","highlight_start":1,"highlight_end":63},{"text":"    use models::models::gdelt::GDELTObject;","highlight_start":1,"highlight_end":44},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `GDELTActor` instances from string records.","highlight_start":1,"highlight_end":74},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test reads a CSV file containing GDELT data, extracts relevant fields for two actors","highlight_start":1,"highlight_end":98},{"text":"    /// from each record, and attempts to create `GDELTActor` instances from these fields.","highlight_start":1,"highlight_end":91},{"text":"    /// It then prints the created actors and asserts that the actors are either `Some` or `None`.","highlight_start":1,"highlight_end":99},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_actor_creation() {","highlight_start":1,"highlight_end":37},{"text":"        // Define the path to the CSV file containing test data.","highlight_start":1,"highlight_end":65},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the CSV file and get the string records.","highlight_start":1,"highlight_end":57},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over each record in the CSV file.","highlight_start":1,"highlight_end":53},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            // Collect the fields of the record into a vector of strings.","highlight_start":1,"highlight_end":74},{"text":"            let strings = record.iter().collect::<Vec<&str>>();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the first actor (fields 5 to 14).","highlight_start":1,"highlight_end":72},{"text":"            let actor1_strings = strings[5..=14].to_vec();","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the second actor (fields 15 to 26).","highlight_start":1,"highlight_end":74},{"text":"            let actor2_strings = strings[15..=26].to_vec();","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Create `GDELTActor` instances from the extracted fields.","highlight_start":1,"highlight_end":72},{"text":"            let actor1 = GDELTActor::new(actor1_strings);","highlight_start":1,"highlight_end":58},{"text":"            let actor2 = GDELTActor::new(actor2_strings);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Print the created actors for debugging purposes.","highlight_start":1,"highlight_end":64},{"text":"            println!(\"Actor 1: {:?}\\nActor 2: {:?}\\n\\n\", actor1, actor2);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that the actors are either `Some` or `None`.","highlight_start":1,"highlight_end":67},{"text":"            assert!(actor1.is_some() || actor1.is_none());","highlight_start":1,"highlight_end":59},{"text":"            assert!(actor2.is_some() || actor2.is_none());","highlight_start":1,"highlight_end":59},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `GDELTActor` instances from concatenated string records.","highlight_start":1,"highlight_end":87},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test reads a CSV file containing GDELT data, concatenates the fields of each record","highlight_start":1,"highlight_end":97},{"text":"    /// into a single string, splits the string back into fields, and attempts to create `GDELTActor`","highlight_start":1,"highlight_end":102},{"text":"    /// instances from these fields. It then prints the created actors and asserts that the actors","highlight_start":1,"highlight_end":99},{"text":"    /// are either `Some` or `None`.","highlight_start":1,"highlight_end":37},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_actor_from_strings() {","highlight_start":1,"highlight_end":41},{"text":"        // Define the path to the CSV file containing test data.","highlight_start":1,"highlight_end":65},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the CSV file and get the string records.","highlight_start":1,"highlight_end":57},{"text":"        let string_records = data_reader(download_path, false).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over each record in the CSV file.","highlight_start":1,"highlight_end":53},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            // Concatenate the fields of the record into a single string separated by tabs.","highlight_start":1,"highlight_end":92},{"text":"            let record_string = record.iter().collect::<Vec<&str>>().join(\"\\t\");","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Split the concatenated string back into fields.","highlight_start":1,"highlight_end":63},{"text":"            let trimmed_string = record_string.split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the first actor (fields 5 to 14) and join them with tabs.","highlight_start":1,"highlight_end":96},{"text":"            let actor1_string = trimmed_string[5..=14].join(\"\\t\");","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the second actor (fields 15 to 26) and join them with tabs.","highlight_start":1,"highlight_end":98},{"text":"            let actor2_string = trimmed_string[15..=26].join(\"\\t\");","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Create `GDELTActor` instances from the concatenated fields.","highlight_start":1,"highlight_end":75},{"text":"            let actor1 = GDELTActor::from_strings(&actor1_string);","highlight_start":1,"highlight_end":67},{"text":"            let actor2 = GDELTActor::from_strings(&actor2_string);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Print the created actors for debugging purposes.","highlight_start":1,"highlight_end":64},{"text":"            println!(\"Actor 1: {:?}\\nActor 2: {:?}\\n\\n\", actor1, actor2);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that the actors are either `Some` or `None`.","highlight_start":1,"highlight_end":67},{"text":"            assert!(actor1.is_some() || actor1.is_none());","highlight_start":1,"highlight_end":59},{"text":"            assert!(actor2.is_some() || actor2.is_none());","highlight_start":1,"highlight_end":59},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::module_inception)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_actor_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_actor_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::EXPORT_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_actor::GDELTActor;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::module_inception)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"casting to the same type is unnecessary (`u16` -> `u16`)","code":{"code":"clippy::unnecessary_cast","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":835,"byte_end":843,"line_start":24,"line_end":24,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            let category = GDELTCategoryList::from(i as u16);","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unnecessary_cast)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_category_list_tests.rs","byte_start":835,"byte_end":843,"line_start":24,"line_end":24,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            let category = GDELTCategoryList::from(i as u16);","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":"i","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting to the same type is unnecessary (`u16` -> `u16`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_category_list_tests.rs:24:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let category = GDELTCategoryList::from(i as u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `i`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_cast)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_count_tests.rs","byte_start":100,"byte_end":2401,"line_start":3,"line_end":50,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_count_tests {","highlight_start":1,"highlight_end":28},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::GKG_DATA_PATH;","highlight_start":1,"highlight_end":30},{"text":"    use models::models::gdelt::utils::gdelt_counts::GDELTCount;","highlight_start":1,"highlight_end":64},{"text":"    use models::models::gdelt::GDELTObject;","highlight_start":1,"highlight_end":44},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `GDELTCount` instances and the `from_strings` method.","highlight_start":1,"highlight_end":84},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test reads a CSV file containing GDELT data, extracts the relevant records,","highlight_start":1,"highlight_end":89},{"text":"    /// and attempts to create `GDELTCount` instances from the extracted strings.","highlight_start":1,"highlight_end":82},{"text":"    /// It verifies that the `GDELTCount` instances are created correctly and prints them.","highlight_start":1,"highlight_end":91},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Panics","highlight_start":1,"highlight_end":17},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test will panic if the data cannot be read from the specified file path.","highlight_start":1,"highlight_end":86},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_count_creator_and_from_strings() {","highlight_start":1,"highlight_end":53},{"text":"        // Define the path to the CSV file containing the GDELT data.","highlight_start":1,"highlight_end":70},{"text":"        let download_path = PathBuf::from(GKG_DATA_PATH);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the data from the CSV file. The `data_reader` function returns a vector of records.","highlight_start":1,"highlight_end":100},{"text":"        // Each record is a vector of strings representing the fields in the CSV file.","highlight_start":1,"highlight_end":87},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over each record in the vector of records.","highlight_start":1,"highlight_end":62},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            // Get the string containing the count data from the 7th field (index 6) of the record.","highlight_start":1,"highlight_end":100},{"text":"            if let Some(count_strings) = record.get(6) {","highlight_start":1,"highlight_end":57},{"text":"                // Split the count string into individual count records using the ';' delimiter.","highlight_start":1,"highlight_end":97},{"text":"                let counts = count_strings.split(';');","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Iterate over each count string.","highlight_start":1,"highlight_end":51},{"text":"                for count_str in counts {","highlight_start":1,"highlight_end":42},{"text":"                    // Create a `GDELTCount` instance from the count string using the `from_strings` method.","highlight_start":1,"highlight_end":109},{"text":"                    let count = GDELTCount::from_strings(count_str);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Print the `GDELTCount` instance for debugging purposes.","highlight_start":1,"highlight_end":79},{"text":"                    println!(\"{:?}\", count);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Assert that the `GDELTCount` instance is either `Some` or `None`.","highlight_start":1,"highlight_end":89},{"text":"                    // This assertion is always true and serves as a placeholder for more specific tests.","highlight_start":1,"highlight_end":106},{"text":"                    assert!(count.is_some() || count.is_none());","highlight_start":1,"highlight_end":65},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_count_tests.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_count_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::GKG_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_counts::GDELTCount;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":99,"byte_end":6607,"line_start":3,"line_end":148,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_date_tests {","highlight_start":1,"highlight_end":27},{"text":"    use chrono::{NaiveDate, NaiveDateTime, NaiveTime};","highlight_start":1,"highlight_end":55},{"text":"    use models::models::gdelt::utils::gdelt_date::{DateResolution, GDELTDate};","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the `check_resolution` method of the `GDELTDate` struct.","highlight_start":1,"highlight_end":71},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test verifies that the `check_resolution` method correctly identifies the resolution","highlight_start":1,"highlight_end":98},{"text":"    /// of various date representations. The test data includes different date formats and their","highlight_start":1,"highlight_end":97},{"text":"    /// expected resolutions.","highlight_start":1,"highlight_end":30},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The `check_resolution` method is expected to return the appropriate `DateResolution` enum","highlight_start":1,"highlight_end":98},{"text":"    /// variant for valid date formats and `None` for invalid formats.","highlight_start":1,"highlight_end":71},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_date_check_resolution() {","highlight_start":1,"highlight_end":38},{"text":"        // Define test data as tuples of input date representations and their expected resolutions.","highlight_start":1,"highlight_end":100},{"text":"        let test_data = [","highlight_start":1,"highlight_end":26},{"text":"            (20240101, Some(DateResolution::YearMonthDate)), // YYYYMMDD format","highlight_start":1,"highlight_end":80},{"text":"            (202401, Some(DateResolution::YearMonth)),       // YYYYMM format","highlight_start":1,"highlight_end":78},{"text":"            (0101, None),                                    // Invalid format","highlight_start":1,"highlight_end":79},{"text":"            (2024, Some(DateResolution::Year)),              // YYYY format","highlight_start":1,"highlight_end":76},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                2024_01_01_00_00_00,","highlight_start":1,"highlight_end":37},{"text":"                Some(DateResolution::YearMonthDayHourMinuteSecond),","highlight_start":1,"highlight_end":68},{"text":"            ), // YYYYMMDDHHMMSS format","highlight_start":1,"highlight_end":40},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over the test data and assert that the `check_resolution` method returns the expected resolution.","highlight_start":1,"highlight_end":117},{"text":"        for (input, expected) in test_data.iter() {","highlight_start":1,"highlight_end":52},{"text":"            assert_eq!(GDELTDate::check_resolution(*input), *expected);","highlight_start":1,"highlight_end":72},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the `date_from_int` method of the `GDELTDate` struct.","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test verifies that the `date_from_int` method correctly converts various integer","highlight_start":1,"highlight_end":94},{"text":"    /// representations of dates into `NaiveDateTime` instances. The test data includes different","highlight_start":1,"highlight_end":98},{"text":"    /// date formats and their expected `NaiveDateTime` representations.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The `date_from_int` method is expected to return the appropriate `NaiveDateTime` instance","highlight_start":1,"highlight_end":98},{"text":"    /// for valid date formats and `None` for invalid formats.","highlight_start":1,"highlight_end":63},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_date_from_int() {","highlight_start":1,"highlight_end":30},{"text":"        // Define test data as tuples of input date representations and their expected `NaiveDateTime` instances.","highlight_start":1,"highlight_end":114},{"text":"        let test_data = [","highlight_start":1,"highlight_end":26},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                20240101,","highlight_start":1,"highlight_end":26},{"text":"                Some(NaiveDateTime::new(","highlight_start":1,"highlight_end":41},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                    NaiveTime::from_hms_opt(0, 0, 0).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMMDD format","highlight_start":1,"highlight_end":34},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                202401,","highlight_start":1,"highlight_end":24},{"text":"                Some(NaiveDateTime::from(","highlight_start":1,"highlight_end":42},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMM format","highlight_start":1,"highlight_end":32},{"text":"            (0101, None), // Invalid format","highlight_start":1,"highlight_end":44},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                2024,","highlight_start":1,"highlight_end":22},{"text":"                Some(NaiveDateTime::from(","highlight_start":1,"highlight_end":42},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYY format","highlight_start":1,"highlight_end":30},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                2024_01_01_00_00_00,","highlight_start":1,"highlight_end":37},{"text":"                Some(NaiveDateTime::new(","highlight_start":1,"highlight_end":41},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                    NaiveTime::from_hms_opt(0, 0, 0).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMMDDHHMMSS format","highlight_start":1,"highlight_end":40},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over the test data and assert that the `date_from_int` method returns the expected `NaiveDateTime` instance.","highlight_start":1,"highlight_end":128},{"text":"        for (input, expected) in test_data.iter() {","highlight_start":1,"highlight_end":52},{"text":"            assert_eq!(GDELTDate::naive_date_from_int(*input), *expected);","highlight_start":1,"highlight_end":75},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the `date_from_string` and `from_string` methods of the `GDELTDate` struct.","highlight_start":1,"highlight_end":90},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test verifies that the `date_from_string` and `from_string` methods correctly convert","highlight_start":1,"highlight_end":99},{"text":"    /// various string representations of dates into `NaiveDateTime` instances. The test data includes","highlight_start":1,"highlight_end":103},{"text":"    /// different date formats and their expected `NaiveDateTime` representations.","highlight_start":1,"highlight_end":83},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The `date_from_string` and `from_string` methods are expected to return the appropriate","highlight_start":1,"highlight_end":96},{"text":"    /// `NaiveDateTime` instance for valid date formats and `None` for invalid formats.","highlight_start":1,"highlight_end":88},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_date_from_string_and_from_string() {","highlight_start":1,"highlight_end":49},{"text":"        // Define test data as tuples of input date representations and their expected `NaiveDateTime` instances.","highlight_start":1,"highlight_end":114},{"text":"        let test_data = [","highlight_start":1,"highlight_end":26},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                \"20240101\",","highlight_start":1,"highlight_end":28},{"text":"                Some(NaiveDateTime::new(","highlight_start":1,"highlight_end":41},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                    NaiveTime::from_hms_opt(0, 0, 0).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMMDD format","highlight_start":1,"highlight_end":34},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                \"202401\",","highlight_start":1,"highlight_end":26},{"text":"                Some(NaiveDateTime::from(","highlight_start":1,"highlight_end":42},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMM format","highlight_start":1,"highlight_end":32},{"text":"            (\"0101\", None), // Invalid format","highlight_start":1,"highlight_end":46},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                \"2024\",","highlight_start":1,"highlight_end":24},{"text":"                Some(NaiveDateTime::from(","highlight_start":1,"highlight_end":42},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYY format","highlight_start":1,"highlight_end":30},{"text":"            (","highlight_start":1,"highlight_end":14},{"text":"                \"20240101000000\",","highlight_start":1,"highlight_end":34},{"text":"                Some(NaiveDateTime::new(","highlight_start":1,"highlight_end":41},{"text":"                    NaiveDate::from_ymd_opt(2024, 1, 1).unwrap(),","highlight_start":1,"highlight_end":66},{"text":"                    NaiveTime::from_hms_opt(0, 0, 0).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                )),","highlight_start":1,"highlight_end":20},{"text":"            ), // YYYYMMDDHHMMSS format","highlight_start":1,"highlight_end":40},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over the test data and assert that the `date_from_string` method returns the expected `NaiveDateTime` instance.","highlight_start":1,"highlight_end":131},{"text":"        for (input, expected) in test_data.iter() {","highlight_start":1,"highlight_end":52},{"text":"            assert_eq!(GDELTDate::naive_date_from_string(*input), *expected);","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the `date_from_float` method of the `GDELTDate` struct.","highlight_start":1,"highlight_end":70},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test verifies that the `date_from_float` method correctly converts a float representation","highlight_start":1,"highlight_end":103},{"text":"    /// of a date into a `NaiveDateTime` instance. The test data includes a float date and its expected","highlight_start":1,"highlight_end":104},{"text":"    /// `NaiveDateTime` representation.","highlight_start":1,"highlight_end":40},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The `date_from_float` method is expected to return the appropriate `NaiveDateTime` instance","highlight_start":1,"highlight_end":100},{"text":"    /// for valid float date formats.","highlight_start":1,"highlight_end":38},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_date_from_float() {","highlight_start":1,"highlight_end":32},{"text":"        // Define the input float date and its expected `NaiveDateTime` instance.","highlight_start":1,"highlight_end":82},{"text":"        let float_input = 2024.6172;","highlight_start":1,"highlight_end":37},{"text":"        let expected = Some(NaiveDateTime::from(","highlight_start":1,"highlight_end":49},{"text":"            NaiveDate::from_ymd_opt(2024, 8, 12).unwrap(),","highlight_start":1,"highlight_end":59},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Assert that the `date_from_float` method returns the expected `NaiveDateTime` instance.","highlight_start":1,"highlight_end":99},{"text":"        assert_eq!(GDELTDate::naive_date_from_float(float_input), expected);","highlight_start":1,"highlight_end":77},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:3:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_date_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use chrono::{NaiveDate, NaiveDateTime, NaiveTime};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_date::{DateResolution, GDELTDate};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"deref which would be done by auto-deref","code":{"code":"clippy::explicit_auto_deref","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":5631,"byte_end":5637,"line_start":125,"line_end":125,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"            assert_eq!(GDELTDate::naive_date_from_string(*input), *expected);","highlight_start":58,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::explicit_auto_deref)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_date_tests.rs","byte_start":5631,"byte_end":5637,"line_start":125,"line_end":125,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"            assert_eq!(GDELTDate::naive_date_from_string(*input), *expected);","highlight_start":58,"highlight_end":64}],"label":null,"suggested_replacement":"input","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: deref which would be done by auto-deref\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_date_tests.rs:125:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            assert_eq!(GDELTDate::naive_date_from_string(*input), *expected);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `input`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::explicit_auto_deref)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_event_action_tests.rs","byte_start":13,"byte_end":1807,"line_start":2,"line_end":53,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_event_action_tests {","highlight_start":1,"highlight_end":35},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::EXPORT_DATA_PATH;","highlight_start":1,"highlight_end":33},{"text":"    use models::models::gdelt::utils::gdelt_event_action::GDELTAction;","highlight_start":1,"highlight_end":71},{"text":"    use models::models::gdelt::GDELTObject;","highlight_start":1,"highlight_end":44},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `GDELTAction` instances from string records.","highlight_start":1,"highlight_end":75},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test verifies that the `GDELTAction` instances are created correctly from tab-delimited strings.","highlight_start":1,"highlight_end":110},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_action_creation() {","highlight_start":1,"highlight_end":38},{"text":"        // Define the path to the CSV file containing test data.","highlight_start":1,"highlight_end":65},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the CSV file and get the string records.","highlight_start":1,"highlight_end":57},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let strings = record.iter().collect::<Vec<&str>>();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let action_strings = strings[26..=35].to_vec();","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let action = GDELTAction::new(action_strings);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            println!(\"{:?}\", action);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(action.is_some() || action.is_none());","highlight_start":1,"highlight_end":59},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_action_from_strings() {","highlight_start":1,"highlight_end":42},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let string_records = data_reader(download_path, false).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let record_string = record.iter().collect::<Vec<&str>>().join(\"\\t\");","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let trimmed_string = record_string.split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let acton_strings = trimmed_string[26..=35].join(\"\\t\");","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let action = GDELTAction::from_strings(&acton_strings);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            println!(\"Action: {:?}\\n\\n\", action);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(action.is_some() || action.is_none())","highlight_start":1,"highlight_end":58},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_event_action_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_event_action_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::EXPORT_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_event_action::GDELTAction;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_location_tests.rs","byte_start":13,"byte_end":2373,"line_start":2,"line_end":73,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_location_tests {","highlight_start":1,"highlight_end":31},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::EXPORT_DATA_PATH;","highlight_start":1,"highlight_end":33},{"text":"    use models::models::gdelt::event::Event;","highlight_start":1,"highlight_end":45},{"text":"    use models::models::gdelt::utils::gdelt_location::GDELTLocation;","highlight_start":1,"highlight_end":69},{"text":"    use models::models::gdelt::{DatabaseTableEntry, DatabaseTableEnum, GDELTObject};","highlight_start":1,"highlight_end":85},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_location_from_strings() {","highlight_start":1,"highlight_end":44},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let string_records = data_reader(download_path, false).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let record_string = record.iter().collect::<Vec<&str>>().join(\"\\t\");","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let trimmed_string = record_string.split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location_string = trimmed_string[35..=42].join(\"\\t\");","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location = GDELTLocation::from_strings(&location_string);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            println!(\"Location: {:?}\\n\", location);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(location.is_some() || location.is_none())","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_location_creator() {","highlight_start":1,"highlight_end":39},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let strings = record.iter().collect::<Vec<&str>>();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location_strings = strings[35..=42].to_vec();","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location = GDELTLocation::new(location_strings);","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            println!(\"Location: {:?}\", location);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(location.is_some() || location.is_none())","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gdelt_from_table() {","highlight_start":1,"highlight_end":33},{"text":"        let download_path = PathBuf::from(EXPORT_DATA_PATH);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let record_string = record.iter().collect::<Vec<&str>>().join(\"\\t\");","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let trimmed_string = record_string.split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location_string = trimmed_string[35..=42].join(\"\\t\");","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let location = GDELTLocation::from_table(","highlight_start":1,"highlight_end":54},{"text":"                &location_string,","highlight_start":1,"highlight_end":34},{"text":"                DatabaseTableEnum::Event(None),","highlight_start":1,"highlight_end":48},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            println!(\"Location: {:?}\\n\", location);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(location.is_some() || location.is_none())","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_location_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_location_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::EXPORT_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::event::Event;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_location_types_tests.rs","byte_start":13,"byte_end":703,"line_start":2,"line_end":31,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_location_types_tests {","highlight_start":1,"highlight_end":37},{"text":"    use models::models::gdelt::utils::gdelt_location_types::GDELTLocationTypes;","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_from_u8() {","highlight_start":1,"highlight_end":24},{"text":"        for i in 1..=6 {","highlight_start":1,"highlight_end":25},{"text":"            let location = GDELTLocationTypes::from(i);","highlight_start":1,"highlight_end":56},{"text":"            let mut u_8 = u8::from(location);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if i == 4 {","highlight_start":1,"highlight_end":24},{"text":"                u_8 += 1;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if i == 5 {","highlight_start":1,"highlight_end":24},{"text":"                if u_8 == 2 {","highlight_start":1,"highlight_end":30},{"text":"                    u_8 += 3;","highlight_start":1,"highlight_end":30},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // Handle the overflow case","highlight_start":1,"highlight_end":48},{"text":"                    assert!(u_8 < 3);","highlight_start":1,"highlight_end":38},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if u_8 == 0 {","highlight_start":1,"highlight_end":26},{"text":"                u_8 += i","highlight_start":1,"highlight_end":25},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert_eq!(i, u_8);","highlight_start":1,"highlight_end":32},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_location_types_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_location_types_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_location_types::GDELTLocationTypes;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[test]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_quotation_tests.rs","byte_start":13,"byte_end":883,"line_start":2,"line_end":28,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_quotation_tests {","highlight_start":1,"highlight_end":32},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::GKG_DATA_PATH;","highlight_start":1,"highlight_end":30},{"text":"    use models::models::gdelt::utils::gdelt_quotation::GDELTQuotation;","highlight_start":1,"highlight_end":71},{"text":"    use models::models::gdelt::GDELTObject;","highlight_start":1,"highlight_end":44},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_from_strings() {","highlight_start":1,"highlight_end":29},{"text":"        let download_path = PathBuf::from(GKG_DATA_PATH);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read Data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            let record_string = record.iter().collect::<Vec<&str>>();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let quotation_string = record_string.get(22);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let quotation = match quotation_string {","highlight_start":1,"highlight_end":53},{"text":"                Some(&\"\") | None => None,","highlight_start":1,"highlight_end":42},{"text":"                Some(value) => GDELTQuotation::from_strings(value),","highlight_start":1,"highlight_end":68},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            assert!(quotation.is_some() || quotation.is_none())","highlight_start":1,"highlight_end":64},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_quotation_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_quotation_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::GKG_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_quotation::GDELTQuotation;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_tone_tests.rs","byte_start":13,"byte_end":3318,"line_start":2,"line_end":76,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod gdelt_tone_tests {","highlight_start":1,"highlight_end":27},{"text":"    use crate::data_reader::data_reader;","highlight_start":1,"highlight_end":41},{"text":"    use crate::GKG_DATA_PATH;","highlight_start":1,"highlight_end":30},{"text":"    use models::models::gdelt::utils::gdelt_tone::Tone;","highlight_start":1,"highlight_end":56},{"text":"    use models::models::gdelt::GDELTObject;","highlight_start":1,"highlight_end":44},{"text":"    use std::path::PathBuf;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `Tone` instances from string records.","highlight_start":1,"highlight_end":68},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test reads a CSV file containing GDELT data, extracts relevant fields for the tone","highlight_start":1,"highlight_end":96},{"text":"    /// from each record, and attempts to create `Tone` instances from these fields.","highlight_start":1,"highlight_end":85},{"text":"    /// It then prints the created tones and asserts that the tones are either `Some` or `None`.","highlight_start":1,"highlight_end":97},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_tone_creation() {","highlight_start":1,"highlight_end":30},{"text":"        // Define the path to the CSV file containing test data.","highlight_start":1,"highlight_end":65},{"text":"        let download_path = PathBuf::from(GKG_DATA_PATH);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the CSV file and get the string records.","highlight_start":1,"highlight_end":57},{"text":"        let string_records = data_reader(download_path, true).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over each record in the CSV file.","highlight_start":1,"highlight_end":53},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            // Collect the fields of the record into a vector of strings.","highlight_start":1,"highlight_end":74},{"text":"            let strings = record.iter().collect::<Vec<&str>>();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the tone (fields 27 to 33).","highlight_start":1,"highlight_end":66},{"text":"            let tone_strings = strings[15].split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Create `Tone` instances from the extracted fields.","highlight_start":1,"highlight_end":66},{"text":"            let tone = Tone::new(tone_strings);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Print the created tones for debugging purposes.","highlight_start":1,"highlight_end":63},{"text":"            println!(\"Tone: {:?}\\n\\n\", tone);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that the tones are either `Some` or `None`.","highlight_start":1,"highlight_end":66},{"text":"            assert!(tone.is_some() || tone.is_none());","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Tests the creation of `Tone` instances from concatenated string records.","highlight_start":1,"highlight_end":81},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This test reads a CSV file containing GDELT data, concatenates the fields of each record","highlight_start":1,"highlight_end":97},{"text":"    /// into a single string, splits the string back into fields, and attempts to create `Tone`","highlight_start":1,"highlight_end":96},{"text":"    /// instances from these fields. It then prints the created tones and asserts that the tones","highlight_start":1,"highlight_end":97},{"text":"    /// are either `Some` or `None`.","highlight_start":1,"highlight_end":37},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_tone_from_strings() {","highlight_start":1,"highlight_end":34},{"text":"        // Define the path to the CSV file containing test data.","highlight_start":1,"highlight_end":65},{"text":"        let download_path = PathBuf::from(GKG_DATA_PATH);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Read the CSV file and get the string records.","highlight_start":1,"highlight_end":57},{"text":"        let string_records = data_reader(download_path, false).expect(\"Failed to read data\");","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Iterate over each record in the CSV file.","highlight_start":1,"highlight_end":53},{"text":"        for record in string_records {","highlight_start":1,"highlight_end":39},{"text":"            // Concatenate the fields of the record into a single string separated by tabs.","highlight_start":1,"highlight_end":92},{"text":"            let record_string = record.iter().collect::<Vec<&str>>().join(\"\\t\");","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Split the concatenated string back into fields.","highlight_start":1,"highlight_end":63},{"text":"            let trimmed_string = record_string.split(\"\\t\").collect::<Vec<&str>>();","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Extract the fields for the tone (fields 27 to 33) and join them with tabs.","highlight_start":1,"highlight_end":90},{"text":"            let tone_string = trimmed_string[15];","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Create `Tone` instances from the concatenated fields.","highlight_start":1,"highlight_end":69},{"text":"            let tone = Tone::from_strings(&tone_string);","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Print the created tones for debugging purposes.","highlight_start":1,"highlight_end":63},{"text":"            println!(\"Tone: {:?}\\n\\n\", tone);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that the tones are either `Some` or `None`.","highlight_start":1,"highlight_end":66},{"text":"            assert!(tone.is_some() || tone.is_none());","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_tone_tests.rs:2:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod gdelt_tone_tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data_reader::data_reader;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::GKG_DATA_PATH;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use models::models::gdelt::utils::gdelt_tone::Tone;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"tests/gdelt/util/gdelt_tone_tests.rs","byte_start":3054,"byte_end":3066,"line_start":67,"line_end":67,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"            let tone = Tone::from_strings(&tone_string);","highlight_start":43,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_borrow)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"tests/gdelt/util/gdelt_tone_tests.rs","byte_start":3054,"byte_end":3066,"line_start":67,"line_end":67,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"            let tone = Tone::from_strings(&tone_string);","highlight_start":43,"highlight_end":55}],"label":null,"suggested_replacement":"tone_string","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/gdelt/util/gdelt_tone_tests.rs:67:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tone = Tone::from_strings(&tone_string);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `tone_string`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_borrow)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"21 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 21 warnings emitted\u001b[0m\n\n"}
