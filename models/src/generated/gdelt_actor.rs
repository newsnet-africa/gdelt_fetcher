// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GdeltActor {
    /// The code of the actor; if available.
    #[prost(string, optional, tag = "1")]
    pub code: ::core::option::Option<::prost::alloc::string::String>,
    /// The name of the actor; if available.
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// The country code associated with the actor; if available.
    #[prost(string, optional, tag = "3")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    /// The known group code associated with the actor; if available.
    #[prost(string, optional, tag = "4")]
    pub known_group_code: ::core::option::Option<::prost::alloc::string::String>,
    /// The ethnic code associated with the actor; if available.
    #[prost(string, optional, tag = "5")]
    pub ethnic_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "6")]
    pub religion_code: ::core::option::Option<gdelt_actor::ReligionCode>,
    #[prost(message, optional, tag = "7")]
    pub codes: ::core::option::Option<gdelt_actor::AdditionalCodes>,
}
/// Nested message and enum types in `GDELTActor`.
pub mod gdelt_actor {
    /// A message containing two optional religion codes associated with the actor.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ReligionCode {
        #[prost(string, optional, tag = "1")]
        pub code1: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "2")]
        pub code2: ::core::option::Option<::prost::alloc::string::String>,
    }
    /// A message containing three optional additional codes associated with the actor.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AdditionalCodes {
        #[prost(string, optional, tag = "1")]
        pub code1: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "2")]
        pub code2: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "3")]
        pub code3: ::core::option::Option<::prost::alloc::string::String>,
    }
}
