// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GdeltLocation {
    /// The type of the location.
    #[prost(enumeration = "gdelt_location::GdeltLocationTypes", optional, tag = "1")]
    pub location_type: ::core::option::Option<i32>,
    /// The full name of the location.
    #[prost(string, optional, tag = "2")]
    pub location_full_name: ::core::option::Option<::prost::alloc::string::String>,
    /// The country code of the location.
    #[prost(string, optional, tag = "3")]
    pub location_country_code: ::core::option::Option<::prost::alloc::string::String>,
    /// The administrative codes of the location (admin1, admin2).
    #[prost(message, optional, tag = "4")]
    pub location_admin_code: ::core::option::Option<gdelt_location::AdminCodes>,
    /// The coordinates of the location (latitude, longitude).
    #[prost(message, optional, tag = "5")]
    pub co_ord: ::core::option::Option<gdelt_location::Coordinates>,
    /// The feature ID of the location.
    #[prost(string, optional, tag = "6")]
    pub feature_id: ::core::option::Option<::prost::alloc::string::String>,
    /// The character offset of the location.
    #[prost(uint64, optional, tag = "7")]
    pub char_offset: ::core::option::Option<u64>,
}
/// Nested message and enum types in `GDELTLocation`.
pub mod gdelt_location {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AdminCodes {
        #[prost(string, optional, tag = "1")]
        pub admin1: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "2")]
        pub admin2: ::core::option::Option<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Coordinates {
        #[prost(double, tag = "1")]
        pub latitude: f64,
        #[prost(double, tag = "2")]
        pub longitude: f64,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum GdeltLocationTypes {
        UnknownLocation = 0,
        /// Represents a country location.
        Country = 1,
        /// Represents a province location.
        Province = 2,
        /// Represents a city location.
        City = 3,
    }
    impl GdeltLocationTypes {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                GdeltLocationTypes::UnknownLocation => "UNKNOWN_LOCATION",
                GdeltLocationTypes::Country => "COUNTRY",
                GdeltLocationTypes::Province => "PROVINCE",
                GdeltLocationTypes::City => "CITY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN_LOCATION" => Some(Self::UnknownLocation),
                "COUNTRY" => Some(Self::Country),
                "PROVINCE" => Some(Self::Province),
                "CITY" => Some(Self::City),
                _ => None,
            }
        }
    }
}
