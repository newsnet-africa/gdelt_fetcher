// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Path {
    #[prost(string, repeated, tag = "1")]
    pub item: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Event CRUD operations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEventRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub event: ::core::option::Option<super::event::Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEventResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub event: ::core::option::Option<super::event::Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEventRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEventResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub event: ::core::option::Option<super::event::Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEventRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub event: ::core::option::Option<super::event::Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEventResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub event: ::core::option::Option<super::event::Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteEventRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteEventResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Mention CRUD operations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMentionRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub mention: ::core::option::Option<super::mention::Mentions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMentionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub mention: ::core::option::Option<super::mention::Mentions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMentionRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMentionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub mention: ::core::option::Option<super::mention::Mentions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMentionRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub mention: ::core::option::Option<super::mention::Mentions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMentionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub mention: ::core::option::Option<super::mention::Mentions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMentionRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMentionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// GlobalKnowledgeGraph CRUD operations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGlobalKnowledgeGraphRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub gkg: ::core::option::Option<super::gkg::GlobalKnowledgeGraph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGlobalKnowledgeGraphResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub gkg: ::core::option::Option<super::gkg::GlobalKnowledgeGraph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGlobalKnowledgeGraphRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGlobalKnowledgeGraphResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub gkg: ::core::option::Option<super::gkg::GlobalKnowledgeGraph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGlobalKnowledgeGraphRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
    #[prost(message, optional, tag = "2")]
    pub gkg: ::core::option::Option<super::gkg::GlobalKnowledgeGraph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGlobalKnowledgeGraphResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub gkg: ::core::option::Option<super::gkg::GlobalKnowledgeGraph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteGlobalKnowledgeGraphRequest {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<Path>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteGlobalKnowledgeGraphResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod gdelt_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Define combined CRUD services for Event, Mention, and GlobalKnowledgeGraph
    #[derive(Debug, Clone)]
    pub struct GdeltServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GdeltServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GdeltServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GdeltServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            GdeltServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_event(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/CreateEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "CreateEvent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_event(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/GetEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "GetEvent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_event(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/UpdateEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "UpdateEvent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_event(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/DeleteEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "DeleteEvent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_mention(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateMentionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/CreateMention",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "CreateMention"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_mention(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMentionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/GetMention",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "GetMention"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_mention(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateMentionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/UpdateMention",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "UpdateMention"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_mention(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteMentionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/DeleteMention",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gdelt_service.GdeltService", "DeleteMention"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_global_knowledge_graph(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGlobalKnowledgeGraphResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/CreateGlobalKnowledgeGraph",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "gdelt_service.GdeltService",
                        "CreateGlobalKnowledgeGraph",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_global_knowledge_graph(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGlobalKnowledgeGraphResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/GetGlobalKnowledgeGraph",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "gdelt_service.GdeltService",
                        "GetGlobalKnowledgeGraph",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_global_knowledge_graph(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateGlobalKnowledgeGraphResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/UpdateGlobalKnowledgeGraph",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "gdelt_service.GdeltService",
                        "UpdateGlobalKnowledgeGraph",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_global_knowledge_graph(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteGlobalKnowledgeGraphResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gdelt_service.GdeltService/DeleteGlobalKnowledgeGraph",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "gdelt_service.GdeltService",
                        "DeleteGlobalKnowledgeGraph",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod gdelt_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GdeltServiceServer.
    #[async_trait]
    pub trait GdeltService: Send + Sync + 'static {
        async fn create_event(
            &self,
            request: tonic::Request<super::CreateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateEventResponse>,
            tonic::Status,
        >;
        async fn get_event(
            &self,
            request: tonic::Request<super::GetEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEventResponse>,
            tonic::Status,
        >;
        async fn update_event(
            &self,
            request: tonic::Request<super::UpdateEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateEventResponse>,
            tonic::Status,
        >;
        async fn delete_event(
            &self,
            request: tonic::Request<super::DeleteEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteEventResponse>,
            tonic::Status,
        >;
        async fn create_mention(
            &self,
            request: tonic::Request<super::CreateMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateMentionResponse>,
            tonic::Status,
        >;
        async fn get_mention(
            &self,
            request: tonic::Request<super::GetMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMentionResponse>,
            tonic::Status,
        >;
        async fn update_mention(
            &self,
            request: tonic::Request<super::UpdateMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateMentionResponse>,
            tonic::Status,
        >;
        async fn delete_mention(
            &self,
            request: tonic::Request<super::DeleteMentionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteMentionResponse>,
            tonic::Status,
        >;
        async fn create_global_knowledge_graph(
            &self,
            request: tonic::Request<super::CreateGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGlobalKnowledgeGraphResponse>,
            tonic::Status,
        >;
        async fn get_global_knowledge_graph(
            &self,
            request: tonic::Request<super::GetGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGlobalKnowledgeGraphResponse>,
            tonic::Status,
        >;
        async fn update_global_knowledge_graph(
            &self,
            request: tonic::Request<super::UpdateGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateGlobalKnowledgeGraphResponse>,
            tonic::Status,
        >;
        async fn delete_global_knowledge_graph(
            &self,
            request: tonic::Request<super::DeleteGlobalKnowledgeGraphRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteGlobalKnowledgeGraphResponse>,
            tonic::Status,
        >;
    }
    /// Define combined CRUD services for Event, Mention, and GlobalKnowledgeGraph
    #[derive(Debug)]
    pub struct GdeltServiceServer<T: GdeltService> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: GdeltService> GdeltServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GdeltServiceServer<T>
    where
        T: GdeltService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gdelt_service.GdeltService/CreateEvent" => {
                    #[allow(non_camel_case_types)]
                    struct CreateEventSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::CreateEventRequest>
                    for CreateEventSvc<T> {
                        type Response = super::CreateEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::create_event(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/GetEvent" => {
                    #[allow(non_camel_case_types)]
                    struct GetEventSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::GetEventRequest>
                    for GetEventSvc<T> {
                        type Response = super::GetEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::get_event(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/UpdateEvent" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateEventSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::UpdateEventRequest>
                    for UpdateEventSvc<T> {
                        type Response = super::UpdateEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::update_event(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/DeleteEvent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteEventSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::DeleteEventRequest>
                    for DeleteEventSvc<T> {
                        type Response = super::DeleteEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::delete_event(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/CreateMention" => {
                    #[allow(non_camel_case_types)]
                    struct CreateMentionSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::CreateMentionRequest>
                    for CreateMentionSvc<T> {
                        type Response = super::CreateMentionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateMentionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::create_mention(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateMentionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/GetMention" => {
                    #[allow(non_camel_case_types)]
                    struct GetMentionSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::GetMentionRequest>
                    for GetMentionSvc<T> {
                        type Response = super::GetMentionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMentionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::get_mention(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetMentionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/UpdateMention" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateMentionSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::UpdateMentionRequest>
                    for UpdateMentionSvc<T> {
                        type Response = super::UpdateMentionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateMentionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::update_mention(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateMentionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/DeleteMention" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteMentionSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::DeleteMentionRequest>
                    for DeleteMentionSvc<T> {
                        type Response = super::DeleteMentionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteMentionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::delete_mention(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteMentionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/CreateGlobalKnowledgeGraph" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGlobalKnowledgeGraphSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<
                        super::CreateGlobalKnowledgeGraphRequest,
                    > for CreateGlobalKnowledgeGraphSvc<T> {
                        type Response = super::CreateGlobalKnowledgeGraphResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateGlobalKnowledgeGraphRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::create_global_knowledge_graph(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGlobalKnowledgeGraphSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/GetGlobalKnowledgeGraph" => {
                    #[allow(non_camel_case_types)]
                    struct GetGlobalKnowledgeGraphSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<super::GetGlobalKnowledgeGraphRequest>
                    for GetGlobalKnowledgeGraphSvc<T> {
                        type Response = super::GetGlobalKnowledgeGraphResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetGlobalKnowledgeGraphRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::get_global_knowledge_graph(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGlobalKnowledgeGraphSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/UpdateGlobalKnowledgeGraph" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateGlobalKnowledgeGraphSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<
                        super::UpdateGlobalKnowledgeGraphRequest,
                    > for UpdateGlobalKnowledgeGraphSvc<T> {
                        type Response = super::UpdateGlobalKnowledgeGraphResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UpdateGlobalKnowledgeGraphRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::update_global_knowledge_graph(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateGlobalKnowledgeGraphSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gdelt_service.GdeltService/DeleteGlobalKnowledgeGraph" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteGlobalKnowledgeGraphSvc<T: GdeltService>(pub Arc<T>);
                    impl<
                        T: GdeltService,
                    > tonic::server::UnaryService<
                        super::DeleteGlobalKnowledgeGraphRequest,
                    > for DeleteGlobalKnowledgeGraphSvc<T> {
                        type Response = super::DeleteGlobalKnowledgeGraphResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::DeleteGlobalKnowledgeGraphRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GdeltService>::delete_global_knowledge_graph(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteGlobalKnowledgeGraphSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: GdeltService> Clone for GdeltServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: GdeltService> tonic::server::NamedService for GdeltServiceServer<T> {
        const NAME: &'static str = "gdelt_service.GdeltService";
    }
}
